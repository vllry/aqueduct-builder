#!/usr/bin/python3

from threading import Thread
import json
from queue import Full
from sys import exit
from os import getuid, mkdir, remove, listdir
from bottle import route, run, request, static_file, abort, app

import libaqueduct as lib
import libaqueductbuilder as builder


conf = builder.conf
gpg = lib.GPG()


@route('/', method='GET')
def get_info():
	cur = builder.CurrentBuild()
	info = {
		'service': 'aqueduct-builder',
		'name': conf['name'],
		'version': '{{VERSION}}',
		'arch': builder.get_arch(),
		'os': builder.get_os(),
		'queue': buildqueue.list(), #Need to not show callbackurl
		'building': cur.dictionary,
		'releases': builder.get_releases_and_arches()
	}
	return json.dumps(info)


@route('/build/submit', method='POST')
def build_submit():
	upload = request.files.data
	callbackurl = request.forms.get('callbackurl')
	jobid = request.forms.get('jobid')
	arch = request.forms.get('arch')
	os = request.forms.get('os')
	release = request.forms.get('release')

	if not upload or not upload.file:
		return {'success': False, 'message': 'No file supplied'}
	elif not callbackurl:
		return {'success': False, 'message': 'No callbackurl supplied'}
	elif not jobid:
		return {'success': False, 'message': 'No jobid supplied'}
	elif not arch:
		return {'success': False, 'message': 'No arch supplied'}
	elif not os:
		return {'success': False, 'message': 'No os supplied'}
	elif not release:
		return {'success': False, 'message': 'No release supplied'}

	buildid = builder.new_buildid()
	mkdir(conf['dir']['intake']+buildid)
	upload.save(conf['dir']['intake']+buildid)
	path_to_source = conf['dir']['intake'] + buildid + '/' + upload.filename

	try:
		buildqueue.enqueue_nowait({'buildid': buildid, 'jobid': jobid, 'arch': arch, 'os': os, 'release': release, 'source': path_to_source, 'callbackurl': callbackurl})
	except Full:
		remove(path_to_source)
		return {
			'success': False,
			'message': 'Job queue is full'
		}
	else:
		mkdir(conf['dir']['result'] + buildid)

	return {
		'success': True,
		'message': 'Job successfully submitted',
		'id': buildid
	}


@route('/build/<buildid>')
def get_build_log(buildid):
	result = """
<!DOCTYPE html>
<html>
<body>
"""
	for item in listdir(conf['dir']['result']+buildid):
		result += "<a href='./%s/%s'>%s<a><br />" % (buildid, item, item)
	result += """
</body>
</html>
"""
	return result


@route('/build/<buildid>/<path:path>')
def get_build_log(buildid, path):
	return static_file(path, root = conf['dir']['result'] + buildid)


if getuid() != 0:
	print('Please run aqueduct-builder as root')
	exit(1)

buildqueue = lib.PriorityQueue()
builder_thread = Thread(target=builder.daemon, args=(buildqueue,))
builder_thread.start()


class StripPathMiddleware(object):
	def __init__(self, app):
		self.app = app

	def __call__(self, e, h):
		e['PATH_INFO'] = e['PATH_INFO'].rstrip('/')
		return self.app(e,h)

app = app()
myapp = StripPathMiddleware(app)
run(host='', port=conf['port'], app=myapp, debug=True)

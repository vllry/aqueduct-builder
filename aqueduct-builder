#!/usr/bin/python3

from threading import Thread
import json
from sys import exit
from os import getuid
from platform import dist, uname
from bottle import route, run, request, static_file, abort
import libaqueductbuilder as builder



conf = builder.conf



@route('/', method='GET')
def get_info():
	arch = uname()[4]
	if arch == 'x86':
		arch = 'i386'
	elif arch == 'x86_64':
		arch = 'amd64'
	info = {
		'service' : 'aqueduct-builder',
		'name' : conf['name'],
		'version' : '{{VERSION}}',
		'arch' : arch,
		'os' : dist()[0].lower()
		}
	return json.dumps(info)



@route('/build/submit', method='POST')
def build_submit():
	upload = request.files.data
	callbackurl = request.forms.get('callbackurl')
	jobid = request.forms.get('jobid')
	arch = request.forms.get('arch')
	os = request.forms.get('os')
	release = request.forms.get('release')

	if not upload or not upload.file:
		return {'success': False, 'message': 'No file supplied'}
	elif not callbackurl:
		return {'success': False, 'message': 'No callbackurl supplied'}
	elif not jobid:
		return {'success': False, 'message': 'No jobid supplied'}
	elif not arch:
		return {'success': False, 'message': 'No arch supplied'}
	elif not os:
		return {'success': False, 'message': 'No os supplied'}
	elif not release:
		return {'success': False, 'message': 'No release supplied'}

	upload.save(conf['dir']['intake'])
	buildid = builder.db_build_new()
	path_to_source = conf['dir']['intake'] + upload.filename

	t = Thread(target=builder.pkg_build, args=(buildid,callbackurl,jobid,arch,os,release,path_to_source,))
	t.start()

	return {
			'success': True,
			'message': 'Job successfully submitted',
			'id': buildid
			}



@route('/build/<buildid>/log')
def get_build_log(buildid):
	return static_file('build.log', conf['dir']['result'] % buildid)



@route('/build/<buildid>/deb')
def get_build_deb(buildid):
	filename = builder.get_build_file_that_ends_in(buildid, '.deb')
	if filename:
		return static_file(filename[0], filename[1])
	else:
		abort(404, 'No file exists, perhaps the build failed?')



@route('/build/<buildid>/tarball')
def get_build_tarball(buildid):
	filename = builder.get_build_file_that_ends_in(buildid, '.tar.xz')
	if filename:
		return static_file(filename[0], filename[1])
	else:
		abort(404, 'No file exists, perhaps the build failed?')



@route('/build/<buildid>/dsc')
def get_build_dsc(buildid):
	filename = builder.get_build_file_that_ends_in(buildid, '.dsc')
	if filename:
		return static_file(filename[0], filename[1])
	else:
		abort(404, 'No file exists, perhaps the build failed?')



@route('/build/<buildid>/changes')
def get_build_changes(buildid):
	filename = builder.get_build_file_that_ends_in(buildid, '.changes')
	if filename:
		return static_file(filename[0], filename[1])
	else:
		abort(404, 'No file exists, perhaps the build failed?')



if getuid() != 0:
	print('Please run aqueduct-builder as root')
	exit(1)
run(host='', port=conf['port'], debug=True)
